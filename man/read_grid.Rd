% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_grid.R
\name{read_grid}
\alias{read_grid}
\alias{read_grid_interpolate}
\title{Read gridded data in various formats}
\usage{
read_grid(
  file_name,
  parameter,
  is_forecast = TRUE,
  date_times = NULL,
  file_format = NULL,
  file_format_opts = list(),
  vertical_coordinate = c("pressure", "model", "height", NA),
  lead_time = NULL,
  members = NULL,
  transformation = c("none", "interpolate", "regrid", "xsection", "subgrid"),
  transformation_opts = list(),
  show_progress = FALSE,
  data_frame = FALSE,
  readable_times = TRUE,
  spread_members = FALSE,
  ...
)

read_grid_interpolate(file_name, parameter, file_format = NULL, ...)
}
\arguments{
\item{file_name}{A character string with the (full) file name.}

\item{parameter}{The parameter to be read.}

\item{is_forecast}{Logical. If TRUE (the default), data are filtered based on
the forecast initialization time and the lead time. If FALSE, the data are
filtered on the valid time.}

\item{date_times}{A vector of date time strings of the form YYYYMMDD,
YYYYMMDDhh, YYYYMMDDhhmm, or YYYYMMDDhhmmss. For forecast data these would
be the forecast initialization times.}

\item{file_format}{The file format. Possible values include grib, netcdf, FA,
hdf5... Whatever the value is, it is supposed to correspond to a function
"read_XXX" that can deal with the format. If not specified, the format can
often be guessed correctly from file extension or the first few bytes.}

\item{file_format_opts}{Options for the file format as generated by one of
the options functions, e.g. \code{\link{netcdf_opts}}.}

\item{vertical_coordinate}{The vertical coordinate for upper air data. May be
"pressure" for pressure levels, "model" for model levels or "height" for
height levels.}

\item{lead_time}{The lead times to read from a forecast file. If set to NULL,
all lead times will be read from the file.}

\item{members}{For ensemble data, the ensemble members to read from the file.
If set to NULL all members will be read.}

\item{transformation}{The transformation to apply to the gridded data. Can be
"none", "interpolate", "regrid" or "xsection".}

\item{transformation_opts}{Options for the transformation as generated by
\code{\link{interpolate_opts}}, \code{\link{regrid_opts}} or
\code{\link{xsection_opts}}.}

\item{show_progress}{Show progress when reading large amounts of data.}

\item{data_frame}{Logical. For compatibility with current version of
harpSpatial, make sure only a geofield is returned rather than a data frame
when set to FALSE.}

\item{readable_times}{When \code{data_frame = TRUE}, whether to convert times
in unix format to a data-time format. The default is TRUE.}

\item{...}{All arguments passed to the specified reader function.}
}
\value{
A geofield or (possibly) a plain  matrix.
}
\description{
\code{read_grid} is a generic function to read gridded data from a file. A
transformation can optionally be applied to those data.
}
\examples{
if (requireNamespace("Rgrib2", quietly = TRUE) & requireNamespace("harpData", quietly = TRUE)) {
  read_grid(
    system.file("grib/HARMUK20171015T12Z+003.grib", package = "harpData"),
    parameter = "T2m"
  )
  read_grid(
    system.file("grib/HARMUK20171015T12Z+003.grib", package = "harpData"),
    parameter = "RH2m"
  )
  read_grid(
    system.file("grib/HARMUK20171015T12Z+003.grib", package = "harpData"),
    parameter = "tcc"
  )
}
}
