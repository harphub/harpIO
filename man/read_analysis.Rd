% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_analysis.R
\name{read_analysis}
\alias{read_analysis}
\title{Read analysis data from multiple files}
\usage{
read_analysis(
  date_times,
  analysis_model,
  parameter,
  members = NULL,
  members_out = members,
  lags = NULL,
  vertical_coordinate = c("pressure", "model", "height", "depth", NA),
  file_path = getwd(),
  file_format = NULL,
  file_template = "an{YYYY}{MM}{DD}{HH}.grib",
  file_format_opts = list(),
  transformation = c("none", "interpolate", "regrid", "xsection", "subgrid"),
  transformation_opts = NULL,
  output_file_opts = sqlite_opts(),
  return_data = TRUE,
  merge_lags = TRUE,
  show_progress = FALSE
)
}
\arguments{
\item{date_times}{A vector of date time strings to read. Can be in YYYYMMDD,
YYYYMMDDhh, YYYYMMDDhhmm, or YYYYMMDDhhmmss format. Can be numeric or
character. Regularly spaced dates can be generated by
\code{\link{seq_dates}}.}

\item{analysis_model}{The name of the analysis model(s) to read. Can be
expressed as character vector if more than one model is wanted.}

\item{parameter}{The name of the analysis parameter(s) to read from the
files. Should either be harp parameter names (see
\code{\link{show_harp_parameters}}), or in the case of netcdf files can be
the name of the parameters in the files.}

\item{members}{For ensemble analyses, a numeric vector giving the member
numbers to read. If more than one forecast model is to be read in, the
members may be given as a single vector, in which case they are recycled
for each analysis model, or as a named list, with the analysis models (as
given in \code{fcst_model}) as the names. If file names do not include the
ensemble member, i.e. all members are in the same file, setting
\code{members} to NULL will read all members from the files.}

\item{members_out}{If the members are to renumbered on output, the new member
numbers are given in \code{members_out}. Should have the same structure as
\code{members}.}

\item{lags}{A named list of members of an ensemble analysis model that are
lagged and the amount by which they are lagged. The list names are the
names of those forecast models, as given in \code{fcst_model} that have
lagged members, and the lags are given as vectors that are the same length
as the members vector. If the lags are numeric, it is assumed that they are
in hours, but the units may be specified with a letter after each value
where d = days, h = hours, m = minutes and s = seconds. \code{lags} is
primarily used to generate the correct file names for lagged members - for
example a lag of 1 hour will generate a file name with a date-time 1 hour
earlier than the date-time in the sequence \code{(start_data, end_date, by
= by)} and a lead time 1 hour longer.}

\item{vertical_coordinate}{For upper air data to be read the vertical
coordinate in the files must be given. By default, this is "pressure", but
may also be "height" or "model" for model levels.}

\item{file_path}{The parent path to all analysis data. All file names are
generated to be under the \code{file_path} directory. The default is the
current working directory.}

\item{file_format}{The format of files to read. harpIO includes functions to
read 'vfld', 'netcdf', 'grib' and 'fa' format files. If set to NULL, an
attempt will be made to guess the format of the files. However, you may
write your own functions called read_<file_format> function and
\code{read_forecast} will attempt to use that instead. See the vignette on
writing read functions for more information.}

\item{file_template}{A template for the file names. For available built in
templates see \code{\link{show_file_templates}}. If anything else is
passed, it is returned unmodified, or with substitutions made for dynamic
values. Available substitutions are {YYYY} for year, \{MM\} for 2 digit
month with leading zero, \{M\} for month with no leading zero, and
similarly \{DD\} or \{D\} for day, \{HH\} or \{H\} for hour, \{mm\} or
\{m\} for minute. Also \{MBRx\} for ensemble member number where x is the
length of the string including leading zeros. Note that the full path to
the file will always be file_path/template.}

\item{file_format_opts}{A list of options specific to the file format. For
netcdf this can be generated by \code{\link{netcdf_opts}} and for grib by
\code{\link{grib_opts}}.}

\item{transformation}{The transformation to apply to the data once read in.
"none" will return the data in its original form, "interpolate" will
interpolate to points at latitudes and longitudes supplied in
\code{transformation_opts}, "regrid" will regrid the data to a new domain
given in \code{transformation_opts}, and "xsection" will interpolate to a
vertical cross section betweem two points given in
\code{transformation_opts}.}

\item{transformation_opts}{Options for the transformation. For
\code{transformation = "interpolate"} these can be generated by
\code{\link{interpolate_opts}}, for \code{transformation = "regrid"} these
can be generated by \code{\link{regrid_opts}}, and \code{transformation =
"xsection"} these can be generated by \code{\link{xsection_opts}}.}

\item{output_file_opts}{Options for output files. \code{read_forecast} can
output data \code{transformation = "interpolate"} as sqlite files. The
options for the sqlite files can be set with \code{\link{sqlite_opts}}.
Most inportantly, the path argument in \code{link{sqlite_opts}} must not be
NULL for data to be output to sqlite files.}

\item{return_data}{Set to FALSE to not return any data read in to the global
environment.}

\item{merge_lags}{Logical. Whether to merge the lagged members when
\code{return_data = TRUE} (the default).}

\item{show_progress}{Some files may contain a lot of data. Set to TRUE to
show progress when reading these files.}

\item{stop_on_fail}{Logical. Set to TRUE to make execution stop if there are
problems reading a file. Missing files are always skipped regardless of
this setting. The default value is FALSE.}
}
\value{
When \code{return_date = TRUE}, a harp_analysis object.
}
\description{
\code{read_analysis} generates file names, based on the arguments given,
reads data from them, and optionally performs a transformation on those data.
Works in much the same as \code{\link{read_forecast}} except dates must be
given explictly. These can be generated from \code{\link{seq_dates}}. Also,
data are returned by default. If just want to use this function for
interpolating to points and writing the results to sqlite files, make sure to
set \code{return_data = FALSE}.
}
